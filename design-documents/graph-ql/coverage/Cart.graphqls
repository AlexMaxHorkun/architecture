type Query {
    cart(input: CartQueryInput): CartQueryOutput
}

input CartQueryInput {
    cart_id: String!
}

type CartQueryOutput {
    cart: Cart
}

type Cart {
    id: String!
    addresses: [CartAddress]

    line_items_count: Int!
    items_quantity: Float!

    selected_payment_method: CheckoutPaymentMethod
    available_payment_methods: [CheckoutPaymentMethod]!

    customer: CheckoutCustomerInfo

    gift_cards_amount_used: Money
    applied_gift_cards: [CartGiftCard]

    is_multishipping: Bool!
    is_virtual: Bool!
}

type CheckoutCustomer {
    is_guest: Bool!
    email: String!
    prefix: String
    first_name: String!
    last_name: String!
    middle_name: String
    suffix: String
    gender: GenderEnum
    date_of_birth: String
    vat_number: String # Do we need it at all on storefront? Do we need more details
}

enum GenderEnum {
    MALE
    FEMALE
}

type CheckoutPaymentMethod {
    code: String!
    label: String!
}

type CartAddress {
    selected_shipping_method: CheckoutShippingMethod
    available_shipping_methods: [CheckoutShippingMethod]!

    address_type: AdressTypeEnum

    customer: CheckoutCustomer

    company: String

    street: [String] # Should this be an array?
    city: String
    region: CartAddressRegion
    postcode: String
    country: CartAddressCountry
    telephone: String
    fax: String
    same_as_billing: Bool

    items_weight: Float
    customer_notes: String

    gift_cards_amount_used: Money
    applied_gift_cards: [CartGiftCard]
}

type CartGiftCard {
    code: String!
}

type CartAddressCountry {
    code: String
    label: String
}

type CartAddressRegion {
    id: Int # Do we need to expose region ID?
    label: String
}

enum AdressTypeEnum {
    SHIPPING
    BILLING
}

type CheckoutShippingMethod {
    code: String!
    label: String!
}
