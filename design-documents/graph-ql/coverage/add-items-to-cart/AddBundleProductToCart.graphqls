type Mutation {
    addBundleProductsToCart(input: AddBundleProductsToCartInput): AddBundleProductsToCartOutput
    updateBundleProductsInCart(input: UpdateBundleProductsInCartInput): UpdateBundleProductsInCartOutput
}

input UpdateBundleProductsInCartInput {
    cart_id: String!
    cartItems: [UpdateBundleProductCartItemInput!]!
}

input UpdateBundleProductCartItemInput {
    details: UpdateCartItemDetailsInput!
    bundle_options:[BundleOptionInput!]
    customizable_options:[CustomizableOptionInput]
}

input AddBundleProductsToCartInput {
    cart_id: String!
    cartItems: [BundleProductCartItemInput!]!
}

input BundleProductCartItemInput {
    details: CartItemDetailsInput!
    bundle_options:[BundleOptionInput!]!
    customizable_options:[CustomizableOptionInput!]
}

input BundleOptionInput {
    id: Int!
    quantity: Float!
    value: [String!]!
}

type AddBundleProductsToCartOutput {
    cart: Cart!
}

type BundleCartItem implements CartItemInterface {
    customizable_options: [SelectedCustomizableOption]!
    bundle_options: [SelectedBundleOption!]!
}

type SelectedBundleOption {
    id: Int!
    label: String!
    type: String!
    # No quantity here even though it is set on option level in the input
    values: [SelectedBundleOptionValue!]!
    sort_order: Int!
}

type SelectedBundleOptionValue {
    id: Int!
    label: String!
    quantity: Float! # Quantity is displayed on option value level, while is set on option level
    price: CartItemSelectedOptionValuePrice!
    sort_order: Int!
}

