type Mutation {
    addGiftCardProductsToCart(input: AddGiftCardProductsToCartInput): AddGiftCardProductsToCartOutput
    updateGiftCardProductsInCart(input: UpdateGiftCardProductsInCartInput): UpdateGiftCardProductsInCartOutput
}

input UpdateGiftCardProductsInCartInput {
    cart_id: String!
    cartItems: [UpdateGiftCardProductCartItemInput!]!
}

input UpdateGiftCardProductCartItemInput {
    details: UpdateCartItemDetailsInput!
    sender_name: String
    recepient_name: String
    amount: MoneyInput # Do we need complex type here or just Float?
    message: String
    customizable_options:[CustomizableOptionInput]
}

input AddGiftCardProductsToCartInput {
    cart_id: String!
    cartItems: [GiftCardProductCartItemInput!]!
}

input GiftCardProductCartItemInput {
    details: CartItemDetailsInput!
    sender_name: String!
    recepient_name: String!
    amount: MoneyInput! # Do we need complex type here or just Float?
    message: String
    customizable_options:[CustomizableOptionInput!]
}

input MoneyInput {
    value: Float @doc(description: "A number expressing a monetary value")
    currency: CurrencyEnum @doc(description: "A three-letter currency code, such as USD or EUR")
}

type AddGiftCardProductsToCartOutput {
    cart: Cart!
}

type GiftCardCartItem implements CartItemInterface {
    sender_name: String!
    recepient_name: String!
    amount: Money!
    message: String
    customizable_options: [SelectedCustomizableOption]!
}
